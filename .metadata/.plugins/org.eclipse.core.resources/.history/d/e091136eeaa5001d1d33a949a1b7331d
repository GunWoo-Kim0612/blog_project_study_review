package com.gwk.review.auth.filter;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;

public class JwtBasicAuthenticationFilter extends BasicAuthenticationFilter {

	public JwtBasicAuthenticationFilter(AuthenticationManager authenticationManager) {
		super(authenticationManager);
		// TODO Auto-generated constructor stub
	}

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		
		System.out.println("인증 및 권한이 필요한 페이지 요청");
		
		//헤더에서 토큰 가져옴
		String jwtToken = request.getHeader("Authorization");
		System.out.println("jwtToken: "+jwtToken);
		
		//헤더가 없거나 Bearer아 아닌지 확인 후 필터 진행
		if(jwtToken == null || !jwtToken.startsWith("Bearer ")) {
			System.out.println("헤더확인 실패");
			chain.doFilter(request, response);
			return;
		}
		
		//토큰파싱 
		// Bearer뺴고 토큰만가져옴
		String token = request.getHeader("Authorization").replace("Bearer ", "");
		
		//해당 토큰 디코딩해  claim의  username을 추출
		//인코딩시 사용한 HMAC256 에 적용한 sign gwk
		String username = JWT.require(Algorithm.HMAC256("gwk"))
							.build()
							.verify(token).getClaim("username").asString();
		
		System.out.println("토큰에서 추출한 claim [username] : " + username);
		
		super.doFilterInternal(request, response, chain);
	}
	
}
